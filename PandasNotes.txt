Q1. What is Pandas?
ans. Pandas is a python library used for working with data sets. It has functions for analyzing, cleaning, exploring, and manipulating data.
The name "pandas" has a reference to both "Panel data", and python data analysis and was created by wes mckinney in 2008.


--> Pandas allows us to analyze big data and make them readable and relevent.
    -> Pandas can clean messy data sets, and make them readable and relevent.
    -> Relevent data is very important in data science.

:} Data science: is a branch of computer science where we study how to store, use and analyze data for deriving information from it.

Q2. What can Pandas do?
ans. Pandas gives you answer about the data. Like,
    -> Is there a correlation between two or more columns?
    -> What is average value?
    -> Max value?
    -> Min value?
pandas are also able to delete rows that are not relevent, or contains wrong value, like empty or null value. This is called cleaning the data.

-> Pandas is usually imported under the pd alias.
    -> alias: In python alias are an alternate name for referring to the same thing.
    ex. import pandas as pd -> Now the pandas packages can be referred to as pd instead of pandas.

-> for checking the pandas version: The version string is stored under __version__ attribute.
ex: print(pd.__version__)

Q3. What is series?
ans. A pandas series is like a column in a table. It is a one-dimensional array holding data of any type.

-> Labels: If nothing else is specified, the values are labeled with their index number. First value has index 0, second value has index 1 etc.
            this label can be used to access a specified value.

-> Key/value Objects as series: You can also use a key/value object, like dictionary, when creating a series.
    -> Note: THe keys of the dictionary become the labels. To select only some of the items in the dictionary, use the index argument and specify only the items you want to include in the series.

-> DataFrames: Data sets in pandas are usually multi-dimensional tables, called DataFrames. series is like a column, a DataFrames is the whole table

Q4. What is a DataFrame?
ans. A pandas DataFrame is a 2-dimensional data structure, like a 2 dimensional array, or a table with rows and columns.
    locate Row: Pandas use the loc attribute to return one or more specified row(s)

-> Named Indexes: With the index argument, you can name your own indexes.

-> Load Files Into a DataFrame: if your datasets are stored in a file, pandas can load them into a DataFrame.

---->>> Pandas Read CSV: 
Read csv files: A simple way to store big data sets is to use csv file(comma separated files).
csv files contains plain text and is a well know format that can be read by everyone including pandas.
Tip: use to_string() to print the entire DataFrame.

-> max_rows: The number of rows returned is defined in pandas option setting. You can check your system's maximum rows with the pd.option.display.max_rows statement 
            In my system the number is 60, which means that if the DataFrame contains more than 60 rows, the print(df) statement will return only the headers and the first and last 5 rows.

---->> Pandas read JSON: Big data sets are often stored, or extracted as json.
            json is plain text, but has the format of an object, and is well known in the world of programming, including pandas.
            -> Use to_string() to print the entire DataFrame.

        --> Dictionary as JSON: 
            JSON = Python Dictionary: json objects have the same formats as python dictionaries.
            if your JSON code is not in a file, but in a Python dictionary, you can load it into a Dataframe directly.

--->> Pandas-Analyzing DataFrames: 
viewing the data: One of the most used method for getting a quick overview of the DataFrame, is the head() method.

The head() method returns the headers and a specified number of rows starting from the top.
There is also a tail() method for viewing the last rows of the DataFrame.

The tail() method returns the headers and a specified number of rows starting from the bottom.

--->> Info about the data: 
The dataframe object has a method called info() that gives you more information about the dataset.

Result: 

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 169 entries, 0 to 168
Data columns (total 4 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   Duration  169 non-null    int64  
 1   Pulse     169 non-null    int64  
 2   Maxpulse  169 non-null    int64  
 3   Calories  164 non-null    float64
dtypes: float64(1), int64(3)
memory usage: 5.4 KB
None

Explanation: 
-> The result tells us there are 169 rows and 4 columns: 
  ex.  Data columns (total 4 columns):
-> The name of each column with the data type: 
  ex. 
  #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   Duration  169 non-null    int64  
 1   Pulse     169 non-null    int64  
 2   Maxpulse  169 non-null    int64  
 3   Calories  164 non-null    float64

 Null Values: The info() method also tells us how many non-null values there are present in each column, 
 and in our data set it seems like there are 164 of 169 non-Null values in the "calories" column.

 which means that there are 5 rows with no value at all, in the "calories" column for whatever reason.


------->> Data Cleaning : Data cleaning means fixing bad data in your data set.
Bad data could be :

o Empty cells
o Data in wrong format
o Wrong data
o Duplicates

o Empty Cells: Empty cell can potentially give you a wrong result when you analyze data.

o Remove rows: One way to deal with empty cells is to remove rows that contains empty cells.

NOTE: By default, the dropna() method returns a new dataFrame, and will not change the original.

---->> Replace Empty Values: 
--> Another way of dealing with empty cells is to insert a new value instead. This way you do not have to delete entire rows just because of some empty cells.

--> The fillna() method allows us to replace empty cells with a value.

--> Replace Only for specified columns : 
    To only replace empty values for one column, specify the column name for the DataFrame.
    ex. df=pd.read_csv('data.csv')
        df["Calories].fillna(130, inplace=True)

--> Replace Using Mean, Median, or Mode :
A common way to replace empty cells, is to calculate the mean, median or mode value of the column.

-> Pandas uses the mean() median() and mode() methods to calculate the respective values for a specified column.

->calculate the mean, and replace any empty values with it.
ex. df=pd.read_csv('data.csv')
    x=df["Calories"].mean()
    df["Calories"].fillna(x, inplace=True)
Mean : The average value (the sum of all values divided by number of values.)

->calculate the median, and replace any empty values with it.
ex. df=pd.read_csv('data.csv')
    x=df["Calories"].median()
    df["Calories"].fillna(x, inplace = True)
Median : The value in the middle, after you have sorted all values ascending.

->calculate the mode, and replace any empty values with it.
ex. df=pd.read_csv('data.csv')
    x=df["Calories"].mode()[0]
    df["Calories"].fillna(x, inplace = True)
Mode : the value that appears most frequently.

--->> Cleaning Data of Wrong Format :
Data of Wrong format : cells with data of wrong format can make difficult, or even impossible to analyze data.
                       To fix i, you have two options : remove the rows, or convert all cells in the columns into the same format.